	$	proc	int	real	char	record	id	if	while	call	return	}	=	;	,	)	[	++	--	(	digit	+	<	<=	==	!=	>	>=	and	or	then	do	*	not	TRUE	FALSE
Program	Program->P	Program->P	Program->P	Program->P	Program->P	Program->P	Program->P	Program->P	Program->P	Program->P	Program->P	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
P	P->¦Å	P->D P	P->D P	P->D P	P->D P	P->D P	P->S P	P->S P	P->S P	P->S P	P->S P	P->¦Å	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
D	-1	D->proc X id ( M ) { P } 	D->T id A ;	D->T id A ;	D->T id A ;	D->record id { P }	synch	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
A	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	A->= F A	A->¦Å	A->, id A 	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
M	-1	-1	M->X id M'	M->X id M'	M->X id M'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	synch	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
M'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	M'->, X id M'	M'->¦Å	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
T	-1	-1	T->X C	T->X C	T->X C	-1	synch	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
X	-1	-1	X->int	X->real	X->char	-1	synch	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
C	-1	synch	-1	-1	-1	-1	C->¦Å	-1	-1	-1	-1	-1	-1	-1	-1	-1	C->[ digit ] C	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
S	-1	-1	-1	-1	-1	-1	S->L = E ;	S->if B then S else S	S->while B do S	S->call id ( Elist ) ;	S->return E ; 	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
V	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	synch	-1	V->++	V->--	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
N	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
E	-1	-1	-1	-1	E->G E'	-1	E->G E' 	-1	-1	-1	-1	-1	-1	synch	-1	-1	-1	-1	-1	E->G E' 	E->G E' 	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
E'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	E'->¦Å	E'->¦Å	E'->¦Å	-1	-1	-1	-1	-1	E'->+ G E'	E'->¦Å	E'->¦Å	E'->¦Å	E'->¦Å	E'->¦Å	E'->¦Å	E'->¦Å	E'->¦Å	E'->¦Å	E'->¦Å	-1	-1	-1	-1
G	-1	-1	-1	-1	G->F G'	-1	G->F G'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	G->F G'	G->F G'	synch	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
G'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	G'->¦Å	G'->¦Å	G'->¦Å	-1	-1	-1	-1	-1	G'->¦Å	G'->¦Å	G'->¦Å	G'->¦Å	G'->¦Å	G'->¦Å	G'->¦Å	G'->¦Å	G'->¦Å	G'->¦Å	G'->¦Å	G'->* F G'	-1	-1	-1
F	-1	-1	-1	-1	F->char	-1	F->id	-1	-1	-1	-1	-1	synch	-1	-1	-1	-1	-1	-1	F->( E )	F->digit	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
L	-1	-1	-1	-1	-1	-1	L->id L'	-1	-1	-1	-1	-1	synch	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
L'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	L'->¦Å	-1	-1	-1	L'->[ digit ] L'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
B	-1	-1	-1	-1	B->H B'	-1	B->H B'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	B->H B'	B->H B'	-1	-1	-1	-1	-1	-1	-1	-1	-1	synch	-1	-1	B->H B'	B->H B'	B->H B'
B'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	B'->¦Å	-1	B'->¦Å	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	B'->¦Å	B'->or H B'	B'->¦Å	B'->¦Å	-1	-1	-1	-1
H	-1	-1	-1	-1	H->I H'	-1	H->I H'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	H->I H'	H->I H'	-1	-1	-1	-1	-1	-1	-1	-1	synch	-1	-1	-1	H->I H'	H->I H'	H->I H'
H'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	H'->¦Å	-1	H'->¦Å	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	H'->and I H'	H'->¦Å	H'->¦Å	H'->¦Å	-1	-1	-1	-1
I	-1	-1	-1	-1	I->E Relop E	-1	I->E Relop E	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	I->( B )	I->E Relop E	-1	-1	-1	-1	-1	-1	-1	synch	-1	-1	-1	-1	I->not B	I->true	I->false
Relop	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	synch	-1	-1	Relop-><	Relop-><=	Relop->==	Relop->!=	Relop->>	Relop->>=	-1	-1	-1	-1	-1	-1	-1	-1
Elist	-1	-1	-1	-1	Elist->E Elist'	-1	Elist->E Elist'	-1	-1	-1	-1	-1	-1	-1	-1	synch	-1	-1	-1	Elist->E Elist'	Elist->E Elist'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
Elist'	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	Elist'->, E Elist'	Elist'->¦Å	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1	-1
